Tech Stack

Frontend: HTML, CSS, JavaScript (Bootstrap allowed for styling)

Backend: Python Django

Database: pgadmin 4 v9.9 postgre 18 

Environment: The project should be runnable in Docker with Docker Compose (one container for Django backend, one for MySQL database).

ðŸ”¹ Core Features
Academic Management

it should have different types of accounts with different capabilities and features like below.

Student Registration & Admission â€“ Add, update, and manage student profiles.

Faculty Management â€“ Manage faculty details and link them to courses.

Timetable Generation â€“ Create and manage class schedules, prevent conflicts.

Examination Management â€“ Manage exam schedules and student results.

Administrative Features

Attendance Tracking â€“ Faculty can mark attendance, students can view theirs.

Fee Management â€“ Just track payment status and send reminders (no payment gateway).

Library Management â€“ Issue/return books, track availability, fines.

Hostel & Transport Management â€“ Allocate rooms, manage bus routes, student assignments.

Sports Gear Management â€“ Track sports equipment borrowing/return like library.

Report Generation â€“ Attendance %, marks report, student list, etc.

ðŸ”¹ Requirements

Use Djangoâ€™s authentication system with three roles: Admin, Faculty, Student.

Create Django apps like students, faculty, attendance, exams, library, hostel_transport, sports, and fees.

Build clean HTML templates with forms, tables, and dashboards.

Database should be normalized with proper relationships (e.g., Student â†” Courses â†” Faculty).

Add basic reporting charts using Chart.js or similar.

Everything should run locally with docker-compose up and be accessible in browser at http://localhost:8000/.